(window.webpackJsonp=window.webpackJsonp||[]).push([[324],{909:function(e,a,l){"use strict";l.r(a);var t=l(0),n=l.n(t),c=l(1169);a.default=function(e){const[a,l]=Object(t.useState)(!1),[r,m]=Object(t.useState)(!1);localStorage.getItem("arco-lang");return n.a.createElement("span",{style:e.style,className:"markdown-body"},n.a.createElement(c.a,null,n.a.createElement("title",null,"从 v1 到 v2 | SensoroDesign"),n.a.createElement("meta",{name:"description",content:"本次 2.x 版本是一次重大的升级，做了许多的优化和重构，本文档将助力大家顺利完成这次大版本的迁移。"}),n.a.createElement("meta",{property:"og:title",content:"从 v1 到 v2 | SensoroDesign"}),n.a.createElement("meta",{property:"og:description",content:"本次 2.x 版本是一次重大的升级，做了许多的优化和重构，本文档将助力大家顺利完成这次大版本的迁移。"})),n.a.createElement("div",{className:"ac-nav-intro"},n.a.createElement("p",null,"迁移指南"),n.a.createElement("h1",{id:"从-v1-到-v2"},"从 v1 到 v2"),n.a.createElement("p",null,"本次 2.x 版本是一次重大的升级，做了许多的优化和重构，本文档将助力大家顺利完成这次大版本的迁移。")),n.a.createElement("h2",{id:"npm-包名改变"},"NPM 包名改变"),n.a.createElement("p",null,"此次升级，组件库由 ByteDesign 更名为 ",n.a.createElement("strong",null,"ArcoDesign"),"，包名更新为 ",n.a.createElement("strong",null,"@sensoro-design/react"),"。"),n.a.createElement("p",null,n.a.createElement("strong",null,"迁移步骤：")," \b\b"),n.a.createElement("ol",null,n.a.createElement("li",null,"升级组件库")),n.a.createElement("blockquote",null,n.a.createElement("p",null,"由于组件库包名变更，为了避免误引用旧的组件库包，最好将 @bytedesign/web-react 卸载掉。")),n.a.createElement("pre",{className:"code_block"},n.a.createElement("code",{className:"language-bash"},n.a.createElement("span",{className:"token function"},"npm")," remove @bytedesign/web-react ",n.a.createElement("span",{className:"token operator"},"&&")," ",n.a.createElement("span",{className:"token function"},"npm")," i @sensoro-design/react")),n.a.createElement("ol",{start:"2"},n.a.createElement("li",null,"项目中所有用到的包名全局替换：@bytedesign/web-react -> @sensoro-design/react")),n.a.createElement("blockquote",null,n.a.createElement("p",null,"这一步可利用编辑器的全局替换功能。")),n.a.createElement("pre",{className:"code_block"},n.a.createElement("code",{className:"language-diff"},n.a.createElement("span",{className:"token deleted-sign deleted"},n.a.createElement("span",{className:"token prefix deleted"},"-"),n.a.createElement("span",{className:"token line"}," import ","{"," Transfer ","}"," from '@bytedesign/web-react';",n.a.createElement("br",null))),n.a.createElement("span",{className:"token inserted-sign inserted"},n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"}," import ","{"," Transfer ","}"," from '@sensoro-design/react';",n.a.createElement("br",null))),n.a.createElement("br",null),n.a.createElement("span",{className:"token deleted-sign deleted"},n.a.createElement("span",{className:"token prefix deleted"},"-"),n.a.createElement("span",{className:"token line"}," import ","{"," IconRight, IconLeft ","}"," from '@bytedesign/web-react/icon';",n.a.createElement("br",null))),n.a.createElement("span",{className:"token inserted-sign inserted"},n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"}," import ","{"," IconRight, IconLeft ","}"," from '@sensoro-design/react/icon';",n.a.createElement("br",null))),n.a.createElement("br",null),n.a.createElement("span",{className:"token deleted-sign deleted"},n.a.createElement("span",{className:"token prefix deleted"},"-"),n.a.createElement("span",{className:"token line"}," @import '~@bytedesign/web-react/dist/css/byteui.css';",n.a.createElement("br",null))),n.a.createElement("span",{className:"token inserted-sign inserted"},n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"}," @import '~@sensoro-design/react/dist/css/byteui.css';",n.a.createElement("br",null))),n.a.createElement("br",null),n.a.createElement("span",{className:"token deleted-sign deleted"},n.a.createElement("span",{className:"token prefix deleted"},"-"),n.a.createElement("span",{className:"token line"}," import '@bytedesign/web-react/dist/css/byteui.css';",n.a.createElement("br",null))),n.a.createElement("span",{className:"token inserted-sign inserted"},n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"}," import '@sensoro-design/react/dist/css/byteui.css';")))),n.a.createElement("ol",{start:"3"},n.a.createElement("li",null,"替换 css 的文件名：byteui -> arco")),n.a.createElement("pre",{className:"code_block"},n.a.createElement("code",{className:"language-diff"},n.a.createElement("span",{className:"token deleted-sign deleted"},n.a.createElement("span",{className:"token prefix deleted"},"-"),n.a.createElement("span",{className:"token line"}," @import '~@sensoro-design/react/dist/css/byteui.css';",n.a.createElement("br",null))),n.a.createElement("span",{className:"token inserted-sign inserted"},n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"}," @import '~@sensoro-design/react/dist/css/arco.css';",n.a.createElement("br",null))),n.a.createElement("br",null),n.a.createElement("span",{className:"token deleted-sign deleted"},n.a.createElement("span",{className:"token prefix deleted"},"-"),n.a.createElement("span",{className:"token line"}," import '@sensoro-design/react/dist/css/byteui.css';",n.a.createElement("br",null))),n.a.createElement("span",{className:"token inserted-sign inserted"},n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"}," import '@sensoro-design/react/dist/css/arco.css';")))),n.a.createElement("h2",{id:"css-类名前缀改变"},"CSS 类名前缀改变"),n.a.createElement("p",null,"所有组件的 CSS 类名前缀由 ",n.a.createElement("code",null,"byte-")," 变成了 ",n.a.createElement("code",null,"arco-"),"。如果您的项目中存在对 ByteDesign 的样式覆盖，请进行以下迁移步骤。"),n.a.createElement("p",null,n.a.createElement("strong",null,"迁移步骤")),n.a.createElement("p",null,"全局替换您做样式覆盖的 less 中的 ",n.a.createElement("code",null,"byte-")," 为 ",n.a.createElement("code",null,"arco-"),"，并确认对应页面是否表现依旧正常。"),n.a.createElement("p",null,n.a.createElement("strong",null,"如果您依旧想要使用 ",n.a.createElement("code",null,"byte-")," 前缀，那么您需要做以下步骤全局修改样式前缀（不建议）")),n.a.createElement("p",null,"请注意，尽管我们存在途径可以全局修改样式前缀，但并不推荐您在迁移中使用。因为 ArcoDesign 对样式规范做了较大的升级，为了更好的视觉体验，我们不可避免地修改了一些组件的 DOM 结构，以及对一些 ByteDesign 中存在的不规范类名进行了调整。"),n.a.createElement("ol",null,n.a.createElement("li",null,"全局配置 ArcoDesign 的 ",n.a.createElement("code",null,"prefixCls"),"：")),n.a.createElement("pre",{className:"code_block"},n.a.createElement("code",{className:"language-js"},n.a.createElement("span",{className:"token comment"},"// 这样所有组件的类名前缀都会变为 byte，默认是 arco"),n.a.createElement("br",null),n.a.createElement("span",{className:"token tag"},n.a.createElement("span",{className:"token tag"},n.a.createElement("span",{className:"token punctuation"},"<"),n.a.createElement("span",{className:"token class-name"},"ConfigProvider"))," ",n.a.createElement("span",{className:"token attr-name"},"prefixCls"),n.a.createElement("span",{className:"token attr-value"},n.a.createElement("span",{className:"token punctuation attr-equals"},"="),n.a.createElement("span",{className:"token punctuation"},'"'),"byte",n.a.createElement("span",{className:"token punctuation"},'"')),n.a.createElement("span",{className:"token punctuation"},">")),n.a.createElement("br",null),"  ",n.a.createElement("span",{className:"token tag"},n.a.createElement("span",{className:"token tag"},n.a.createElement("span",{className:"token punctuation"},"<"),n.a.createElement("span",{className:"token class-name"},"App"))," ",n.a.createElement("span",{className:"token punctuation"},"/>")),n.a.createElement("br",null),n.a.createElement("span",{className:"token tag"},n.a.createElement("span",{className:"token tag"},n.a.createElement("span",{className:"token punctuation"},"</"),n.a.createElement("span",{className:"token class-name"},"ConfigProvider")),n.a.createElement("span",{className:"token punctuation"},">")))),n.a.createElement("ol",{start:"2"},n.a.createElement("li",null,"通过 ",n.a.createElement("code",null,"modifyVars")," 配置 less 里的 ",n.a.createElement("code",null,"prefix")," 变量：")),n.a.createElement("pre",{className:"code_block"},n.a.createElement("code",{className:"language-diff"},"// webpack.config.js",n.a.createElement("br",null),"module.exports = ","{",n.a.createElement("br",null),n.a.createElement("span",{className:"token unchanged"},n.a.createElement("span",{className:"token prefix unchanged"}," "),n.a.createElement("span",{className:"token line"}," rules: [","{",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix unchanged"}," "),n.a.createElement("span",{className:"token line"},"   test: /\\.less$/,",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix unchanged"}," "),n.a.createElement("span",{className:"token line"},"   use: [","{",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix unchanged"}," "),n.a.createElement("span",{className:"token line"},"     loader: 'style-loader',",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix unchanged"}," "),n.a.createElement("span",{className:"token line"},"   ","}",", ","{",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix unchanged"}," "),n.a.createElement("span",{className:"token line"},"     loader: 'css-loader',",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix unchanged"}," "),n.a.createElement("span",{className:"token line"},"   ","}",", ","{",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix unchanged"}," "),n.a.createElement("span",{className:"token line"},"     loader: 'less-loader',",n.a.createElement("br",null))),n.a.createElement("span",{className:"token inserted-sign inserted"},n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"},"     options: ","{",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"},"       modifyVars: ","{",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"},"         prefix: 'byte',",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"},"       ","}",",",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"},"       javascriptEnabled: true",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"},"     ","}",",",n.a.createElement("br",null))),n.a.createElement("span",{className:"token unchanged"},n.a.createElement("span",{className:"token prefix unchanged"}," "),n.a.createElement("span",{className:"token line"},"   ","}","],",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix unchanged"}," "),n.a.createElement("span",{className:"token line"},"   ...",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix unchanged"}," "),n.a.createElement("span",{className:"token line"}," ","}","],",n.a.createElement("br",null)),n.a.createElement("span",{className:"token prefix unchanged"}," "),n.a.createElement("span",{className:"token line"}," ...",n.a.createElement("br",null))),"}")),n.a.createElement("ol",{start:"3"},n.a.createElement("li",null,"通过 ",n.a.createElement("code",null,"Modal.config")," 配置静态方法创建的对话框的 ",n.a.createElement("code",null,"prefixCls")," 前缀")),n.a.createElement("pre",{className:"code_block"},n.a.createElement("code",{className:"language-js"},n.a.createElement("span",{className:"token maybe-class-name"},"Modal"),n.a.createElement("span",{className:"token punctuation"},"."),n.a.createElement("span",{className:"token method function property-access"},"config"),n.a.createElement("span",{className:"token punctuation"},"("),n.a.createElement("span",{className:"token punctuation"},"{"),n.a.createElement("br",null),"   prefixCls",n.a.createElement("span",{className:"token operator"},":")," ",n.a.createElement("span",{className:"token string"},"'byte'"),n.a.createElement("span",{className:"token punctuation"},","),n.a.createElement("br",null),n.a.createElement("span",{className:"token punctuation"},"}"),n.a.createElement("span",{className:"token punctuation"},")"))),n.a.createElement("p",null,"经过以上三步操作，ArcoDesign 中的组件类名前缀和样式前缀都将变为 ",n.a.createElement("code",null,"byte-"),"，",n.a.createElement("strong",null,"但是依旧提醒您，ArcoDesign 中存在一定的类名和 Dom 结构变动，请您确认下项目中是否存在对 ByteDesign 的样式覆盖，如果存在，请认真检查页面是否在 ArcoDesign 下表现正常。")),n.a.createElement("h2",{id:"迁移工具"},"迁移工具"),n.a.createElement("p",null,"鉴于本次大版本升级的 ",n.a.createElement("strong",null,"Breaking Change")," 比较多，为了帮助大家提高效率，我们提供了 ",n.a.createElement("strong",null,"codemod cli")," 工具 ",n.a.createElement("code",null,"@arco-design/codemod"),"。"),n.a.createElement("blockquote",null,n.a.createElement("p",null,"当然您也可以选择自己修改代码。")),n.a.createElement("p",null,n.a.createElement("strong",null,"迁移步骤")),n.a.createElement("ol",null,n.a.createElement("li",null,"检查 git 状态")),n.a.createElement("p",null,"在运行 codemod 之前，建议您先将本地修改都提交或者暂存，让 git 工作区处于一个干净的状态，方便我们在运行 codemod 之后，检查变更。"),n.a.createElement("ol",{start:"2"},n.a.createElement("li",null,"运行 codemod")),n.a.createElement("pre",{className:"code_block"},n.a.createElement("code",{className:"language-bash"},n.a.createElement("span",{className:"token comment"},"# 直接通过 npx 运行"),n.a.createElement("br",null),"npx -p @arco-design/codemod arco-codemod ./src",n.a.createElement("br",null),n.a.createElement("br",null),n.a.createElement("span",{className:"token comment"},"# 或者全局安装"),n.a.createElement("br",null),n.a.createElement("span",{className:"token function"},"npm")," i @arco-design/codemod -g",n.a.createElement("br",null),n.a.createElement("br",null),n.a.createElement("span",{className:"token comment"},"# 运行"),n.a.createElement("br",null),"arco-codemod ./src")),n.a.createElement("ol",{start:"3"},n.a.createElement("li",null,"检查输出")),n.a.createElement("p",null,"codemod 已经尽量覆盖能自动修改的部分，还有一部分是逻辑或者类型修改无法覆盖，对于这部分，请关注 codemod 运行后在命令行中打印的提示信息，请逐条检查修复，可反复运行 codemod 来检查修改结果。"),n.a.createElement("blockquote",null,n.a.createElement("p",null,"codemod 的处理结果所输出的格式可能跟您项目配置的代码格式化工具不一致，所以在执行完之后，建议使用您项目中所配置的代码格式化工具修复一下。")),n.a.createElement("p",null,n.a.createElement("strong",null,"迁移工具做了什么")),n.a.createElement("p",null,"迁移工具意在帮助完成一部分无脑的体力活，能够通过修改 AST 实现的转换都可以通过 codemod 实现。"),n.a.createElement("p",null,n.a.createElement("em",null,"codemod 运行过程")),n.a.createElement("img",{src:"https://p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/de0edfe3ea17ee9be4c911fdb75355ef.gif~tplv-uwbnlip3yd-image.image",alt:"codemod cli 运行过程",width:"720"}),n.a.createElement("p",null,n.a.createElement("em",null,"breaking change 处理结果示例")),n.a.createElement("pre",{className:"code_block"},n.a.createElement("code",{className:"language-diff"},"// 移除了 `Button` 的 `type='danger'`, 请使用 `status='danger'` 替代",n.a.createElement("br",null),n.a.createElement("span",{className:"token deleted-sign deleted"},n.a.createElement("span",{className:"token prefix deleted"},"-"),n.a.createElement("span",{className:"token line"}," <Button type='danger'/>",n.a.createElement("br",null))),n.a.createElement("span",{className:"token inserted-sign inserted"},n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"}," <Button status='danger'/>",n.a.createElement("br",null))),n.a.createElement("br",null),"// 调整了 `Form` 的 `wrapperCol` 的默认值为 `","{","{"," span: 19 ","}","}","`, 原来是 12",n.a.createElement("br",null),n.a.createElement("span",{className:"token deleted-sign deleted"},n.a.createElement("span",{className:"token prefix deleted"},"-"),n.a.createElement("span",{className:"token line"}," <Form ...></Form>",n.a.createElement("br",null))),n.a.createElement("span",{className:"token inserted-sign inserted"},n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"}," <Form ... warpperCol=","{","{"," span: 12 ","}","}","></Form>",n.a.createElement("br",null))),n.a.createElement("br",null),"// 移除了 `AutoComplete` 的 `children`, 请使用 `triggerElement` 替代",n.a.createElement("br",null),n.a.createElement("span",{className:"token deleted-sign deleted"},n.a.createElement("span",{className:"token prefix deleted"},"-"),n.a.createElement("span",{className:"token line"}," <AutoComponent><TextArea/></AutoComponent>",n.a.createElement("br",null))),n.a.createElement("span",{className:"token inserted-sign inserted"},n.a.createElement("span",{className:"token prefix inserted"},"+"),n.a.createElement("span",{className:"token line"}," <AutoComponent triggerElement=","{","<TextArea/>","}","></AutoComponent>")))),n.a.createElement("h2",{id:"breaking-change-列表"},"Breaking Change 列表"),n.a.createElement("ul",null,n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"全局调整")),n.a.createElement("ul",null,n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"size")," 的梯度 ",n.a.createElement("code",null,"small"),"|",n.a.createElement("code",null,"default"),"|",n.a.createElement("code",null,"large"),"|",n.a.createElement("code",null,"huge")," 为 ",n.a.createElement("code",null,"mini"),"|",n.a.createElement("code",null,"small"),"|",n.a.createElement("code",null,"default"),"|",n.a.createElement("code",null,"large")))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"图标 Icon")),n.a.createElement("ul",null,n.a.createElement("li",null,"移除了 ByteDesign 已经提示过要废弃的图标"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"按钮 Button")),n.a.createElement("ul",null,n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"type='warning'"),", 请使用 ",n.a.createElement("code",null,"status='warning'")," 替代"),n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"type='danger'"),", 请使用 ",n.a.createElement("code",null,"status='danger'")," 替代"),n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"ghost")))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"栅格 Grid")),n.a.createElement("ul",null,n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"Grid.Row")," 的 ",n.a.createElement("code",null,"flex"),"， 组件直接采用 ",n.a.createElement("code",null,"flex")," 来实现布局不需要配置"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"表格 Table")),n.a.createElement("ul",null,n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"checkbox"),",  请使用 ",n.a.createElement("code",null,"rowSelection.type='checkbox'")," 替代"),n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"checkAll"),",  请使用 ",n.a.createElement("code",null,"rowSelection.checkAll=","{","true","}")," 替代"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"标签页 Tabs")),n.a.createElement("ul",null,n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"destoryOnHide"),", 请使用 ",n.a.createElement("code",null,"destroyOnHide")," 替代"),n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"lazyload")," 的默认值为 ",n.a.createElement("code",null,"true")))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"标签 Tag")),n.a.createElement("ul",null,n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"fill"),", ArcoDesign 本身即为面性设计"),n.a.createElement("li",null,"调整了内置的12种颜色"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"自动补全 AutoComplete")),n.a.createElement("ul",null,n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"filterOption")," 的类型， 与 ",n.a.createElement("code",null,"Select.props.filterOption")," 保持一致"),n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"renderOptions"),", 请使用 ",n.a.createElement("code",null,"dropdownRender")," 替代，并且类型与 ",n.a.createElement("code",null,"Select.props.dropdownRender")," 保持一致"),n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"onSelect")," 的第二个参数的类型，与 ",n.a.createElement("code",null,"Select.option")," 保持一致"),n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"onChange")," 的第二个参数的类型，与 ",n.a.createElement("code",null,"Select.option")," 保持一致"),n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"children"),", 请使用 ",n.a.createElement("code",null,"triggerElement")," 替代"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"复选框 Checkbox")),n.a.createElement("ul",null,n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"Checkbox.Group")," 的 ",n.a.createElement("code",null,"Option")," 的优先级， 调整后 ",n.a.createElement("code",null,"options")," 的优先级高于 ",n.a.createElement("code",null,"children"),", 同 ",n.a.createElement("code",null,"Radio.Group")," 保持一致"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"开关 Switch")),n.a.createElement("ul",null,n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"key")," 为 ",n.a.createElement("code",null,"open")," 的 ",n.a.createElement("code",null,"children"),", 请使用 ",n.a.createElement("code",null,"checkedText")," 指定开启的文案"),n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"key")," 为 ",n.a.createElement("code",null,"close")," 的 ",n.a.createElement("code",null,"children"),", 请使用 ",n.a.createElement("code",null,"uncheckedText")," 指定关闭的文案"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"选择器 Select")),n.a.createElement("ul",null,n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"hideArrowIcon"),", 请使用 ",n.a.createElement("code",null,"arrowIcon=","{","null","}")," 替代"),n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"optionSelectedIcon"),", 多选选项使用复选框来标识是否选中"),n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"tagClassName"),", 请使用 ",n.a.createElement("code",null,"tagRender")," 来自定义多选标签样式"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"滑动输入条 Slider")),n.a.createElement("ul",null,n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"showTooltip"),", 请使用 ",n.a.createElement("code",null,"tooltipVisible")," 替代"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"表单 Form")),n.a.createElement("ul",null,n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"Form")," 的 ",n.a.createElement("code",null,"validateFields")," 方法，请使用 ",n.a.createElement("code",null,"validate")," 替代"),n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"Form")," 的 ",n.a.createElement("code",null,"wrapperCol")," 的默认值为 ",n.a.createElement("code",null,"{","{"," span: 19 ","}","}"),", 原先是 ",n.a.createElement("code",null,"{","{"," span: 12 ","}","}")),n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"FormItem")," 的 ",n.a.createElement("code",null,"initialValue")," 的逻辑，只生效一次，改变时不触发表单控件更新"),n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"FormControl")," 的 ",n.a.createElement("code",null,"initialValue")," 的逻辑，只生效一次，改变时不触发表单控件更新"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"数据穿梭框 Transfer")),n.a.createElement("ul",null,n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"selectedKeys"),", 传入即为受控模式，如果不想受控，请使用 ",n.a.createElement("code",null,"defaultSelectedKeys")," 替代"),n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"targetKeys"),", 传入即为受控模式，如果不想受控，请使用 ",n.a.createElement("code",null,"defaultTargetKeys")," 替代"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"全局提示 Message")),n.a.createElement("ul",null,n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"getContainer"),", 只能通过 ",n.a.createElement("code",null,"Message.config")," 全局设置"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"通知提醒框 Notification")),n.a.createElement("ul",null,n.a.createElement("li",null,"调整了 ",n.a.createElement("code",null,"getContainer"),", 只能通过 ",n.a.createElement("code",null,"Notification.config")," 全局设置"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"菜单 Menu")),n.a.createElement("ul",null,n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"Menu")," 的 ",n.a.createElement("code",null,"activeItemBorderDirection"),", ArcoDesign 设计中不再包含选中状态的亮色指示"),n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"SubMenu")," 的 ",n.a.createElement("code",null,"propClassName"),",  请使用 ",n.a.createElement("code",null,"triggerProps.className")," 来替代"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"触发器 Trigger")),n.a.createElement("ul",null,n.a.createElement("li",null,"移除了 ",n.a.createElement("code",null,"trigger='manual'"),", 只需要传入 ",n.a.createElement("code",null,"popupVisible")," 即可受控"))),n.a.createElement("li",null,n.a.createElement("p",null,n.a.createElement("strong",null,"上传 Upload")),n.a.createElement("ul",null,n.a.createElement("li",null,n.a.createElement("code",null,"uid")," 属性变为必传，以此解决",n.a.createElement("code",null,"1.x"),"版本中偶发受控失效的问题。")))))}}}]);